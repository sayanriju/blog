<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chronicles of My Whims</title>
  <subtitle>Random Rants from /me</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/sayanriju/blog/"/>
  <updated>2017-05-10T14:56:42.824Z</updated>
  <id>https://github.com/sayanriju/blog/</id>
  
  <author>
    <name>Sayan &quot;Riju&quot; Chakrabarti</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Realtime Chat With Express and Faye (Bayeux Protocol)</title>
    <link href="https://github.com/sayanriju/blog/Realtime-Chat-with-Express-and-Faye-Bayeux-Protocol/"/>
    <id>https://github.com/sayanriju/blog/Realtime-Chat-with-Express-and-Faye-Bayeux-Protocol/</id>
    <published>2017-05-10T10:10:08.000Z</published>
    <updated>2017-05-10T14:56:42.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>If you Google around with keywords like “Realtime chat with Express”, the one library that will definitely come up most often is <strong>socket.io</strong>. It is a GREAT library no doubt. However, if you check the tutorials, you will almost always find that they are giving a simplified version of using it. What I mean is that all their server side logic (viz. bootstrapping express, adding routing and sockets) is contained inside a single file. Again, that per se is perfectly ok for a tutorial, but when you try to extrapolate these teachings in your own workflow and/or a running code base, you might face certain small but irksome implementation hiccups. At least I did! I did manage to sort them out eventually (thanks to the collective wisdom that Google bestows upon us), but it still felt kinda hackish and unclean.</p>
<p>So, when one of the ongoing projects that the firm I’m associated with needed a simple realtime communication module, I set out to look for an alternative. Luckily, it turned out that such a solution does exists. Its a beautiful little library called <a href="https://faye.jcoglan.com/" target="_blank" rel="external">Faye</a> which is a “<strong>publish-subscribe</strong> messaging system based on the <a href="https://docs.cometd.org/current/reference/index.html#_bayeux" target="_blank" rel="external">Bayeux</a>  protocol”. We will not go much into the subtle differences between socket.io and faye/bayeux (there <em>are</em> technical differences, though cosmetically they may seem similar) in this post, but will rather put the latter to good use and build a simple little realtime chat interface, which would be minimally invasive on a standard Express app.</p>
<h2 id="Server-Side"><a href="#Server-Side" class="headerlink" title="Server Side"></a>Server Side</h2><p>To begin with, we’ll scaffold an Express app using the <a href="https://expressjs.com/en/starter/generator.html" target="_blank" rel="external">official Express Application Generator</a>. I assume you already have it installed globally via npm.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">express real-time-chat-example --ejs</div><div class="line">cd real-time-chat-example </div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>We’ll be using EJS as our templating engine here. That’s only because EJS is the one I personally use; other engines should work perfectly fine as well.</p>
<p>Now let’s just have Faye join the fray:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save faye</div></pre></td></tr></table></figure>
<p> Next, we add our code to bootstrap Faye, and what better place to do so than where all the Express bootstrapping happens, the entry point of your Express app, the <code>bin/www</code> file!<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'../app'</span>);</div><div class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'faye-express:server'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> faye = <span class="built_in">require</span>(<span class="string">'faye'</span>);  <span class="comment">// added by us</span></div><div class="line"><span class="keyword">var</span> bayeux = <span class="keyword">new</span> faye.NodeAdapter(&#123;<span class="attr">mount</span>: <span class="string">'/faye'</span>, <span class="attr">timeout</span>: <span class="number">45</span>&#125;);  <span class="comment">// added by us</span></div><div class="line"></div><div class="line"><span class="comment">// ..............</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(app);</div><div class="line">bayeux.attach(server); <span class="comment">// added by us</span></div><div class="line"></div><div class="line"><span class="comment">// ...............</span></div></pre></td></tr></table></figure></p>
<p>That’s it! You can now run the express app as usual: <code>./bin/www</code> and visit <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> to see the familiar Welcome to Express page. The only difference here with a stock express app is that Faye has quietly started a central message server mounted at the path <code>/faye</code> on localhost.</p>
<p>Now all we need is a client or two to use the message server.</p>
<h2 id="Client-Side"><a href="#Client-Side" class="headerlink" title="Client Side"></a>Client Side</h2><p>The Welcome to Express message you see comes from the <code>views/index.ejs</code> file which is rendered when you visit the / route of your app. This is where we’ll add our Faye client. We’ll modify the file, starting with the <code>&lt;head&gt;</code> part:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:3000/faye/client.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"javascripts/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<p>jQuery (we’ll need it for rudimentary DOM manipulations) has been included from a CDN.<br>We’d have expected to add the Faye client lib from some CDN as well, but Faye is so nice that it offers its <code>client.js</code> file at a convenient location relative to your app’s root url (<a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>) as soon as you’ve set it up on the server!<br>The <code>public/javascripts/script.js</code> file (which we need to create) shall contain our custom JS code.</p>
<p>Now, we’ll add some more html to the <code>&lt;body&gt;</code> to constitute our rather spartan chat UI. If you need some spice, simply add your CSS in the <code>public/stylesheets/style.css</code> file.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>	</div><div class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"new-message"</span> <span class="attr">placeholder</span>=<span class="string">"Your Message Here"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"submit-btn"</span> <span class="attr">value</span>=<span class="string">"Enter"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Messages:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages-list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Before writing the actual client side code, we should perhaps make a brief mention here about <a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern" target="_blank" rel="external">PubSub</a>, because that’s the paradigm Faye/Bayeux is using.</p>
<p>In this model, we have <em>Clients</em> which can <em>Publish</em> and/or <em>Subscribe</em> to <em>Channels</em>. Whenever one client publishes to a channel, all client-subscribers currently listening to that channel will be informed, in real time, of that publication, and they can act accordingly. The role of the message server here is that of a <em>Broker</em> who manages the entire process transparently &amp; behind the scenes, invisible for all practical purposes to the clients. It gives the impression that the clients are communicating amongst themselves directly.</p>
<p>Note that Faye/Bayeux which uses this PubSub paradigm is fundamentally different from the various implementations (or emulations) of the standard Sockets Protocol (e.g. sockets.io).</p>
<p>Armed with the above knowledge, its time to add our JS code to the <code>public/javascripts/script.js</code> file. The code should be pretty self-explanatory, esp.if you peruse the comments.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the Faye client. </span></div><div class="line"><span class="comment">// (All you need is the mount point for the Faye server you want to connect to)</span></div><div class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Faye.Client(<span class="string">'http://localhost:3000/faye'</span>)</div><div class="line"> </div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  $(<span class="string">"#submit-btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">    evt.preventDefault()</div><div class="line">    <span class="keyword">var</span> newMessage = $(<span class="string">"#new-message"</span>).val()</div><div class="line">    <span class="comment">// We PUBLISH our new message to a CHANNEL (/messages)</span></div><div class="line">    <span class="comment">// which is dynamically "created" *in situ*, if required</span></div><div class="line">    client.publish(<span class="string">"/messages"</span>, &#123;</div><div class="line">      <span class="attr">text</span>: newMessage</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">    </div><div class="line">  <span class="comment">// Now we setup the client to SUBSCRIBE (listen in)</span></div><div class="line">  <span class="comment">// for messages coming into the same CHANNEL (/messages)</span></div><div class="line">  <span class="comment">// (Note that, the client which publishes the message itself is also subscribed)</span></div><div class="line">  client.subscribe(<span class="string">"/messages"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newMessage</span>) </span>&#123;</div><div class="line">    $(<span class="string">"#messages-list"</span>).append(<span class="string">"&lt;li&gt;"</span> + newMessage.text + <span class="string">"&lt;/li&gt;"</span>)</div><div class="line">  &#125;)</div><div class="line">    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>And that’s all! Start the express app using <code>./bin/www</code> and open up two different browser windows/tabs each pointing to <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>. Any message you input in one window will be seen immediately in the other.</p>
<p>So, in just a few lines of simple code, you have a working (albeit rudimentary) realtime chat system going! You can see the complete code at its <a href="https://github.com/sayanriju/realtime-chat-express-faye">Github Repo</a>. </p>
<h2 id="Addendum-Saving-Chats-on-the-Server"><a href="#Addendum-Saving-Chats-on-the-Server" class="headerlink" title="Addendum: Saving Chats on the Server"></a>Addendum: Saving Chats on the Server</h2><p>While our realtime chat example works fine (except for the looks obviously), we would really like to save our chat history somewhere on the server. This can be done in two different ways.</p>
<p>The first option is to set up your server side Express routes the usual way. Have a POST route (say, <code>POST /message</code>) whose handler should receive the message content in its <code>req.body</code> and suitably save it to a database using usual code. On the client side, we can simply add an AJAX call to this route with the new message content as its payload. This AJAX call can occur in tandem with our existing code for faye publish. This method would work particularly well if you already have you Express routing system in place, and just need to add real time functionality without changing existing code or workflow.</p>
<p>The other method is to use Faye on the server as well with <a href="https://faye.jcoglan.com/node/clients.html" target="_blank" rel="external">Server Side Clients</a>. It may sound like an oxymoron, but is extremely simple to implement. Just create a new JS file anywhere on the server, <code>require</code> it inside <code>app.js</code> (or for that matter, you can use the <code>app.js</code> file itself as well), and add the following code in it:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Faye = <span class="built_in">require</span>(<span class="string">"faye"</span>)</div><div class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Faye.Client(<span class="string">'http://localhost:3000/faye'</span>)</div><div class="line"></div><div class="line">client.subscribe(<span class="string">'/messages'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newMessage</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"New Message: "</span>, newMessage) <span class="comment">// this will be shown in the server console</span></div><div class="line">  <span class="comment">// ... do stuff to actually save the new message to your DB</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If the above snippet looks familiar, that’s because it is! Faye’s client code is <em>isomorphic</em>, i.e. same in essence irrespective of whether it appears on the server side or the client side. Also, you can add this code at any suitable place on the server with no friction with your existing codebase. </p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;If you Google around with keywords lik
    
    </summary>
    
      <category term="JavaScript" scheme="https://github.com/sayanriju/blog/categories/JavaScript/"/>
    
      <category term="Node" scheme="https://github.com/sayanriju/blog/categories/JavaScript/Node/"/>
    
    
      <category term="Express" scheme="https://github.com/sayanriju/blog/tags/Express/"/>
    
      <category term="Node" scheme="https://github.com/sayanriju/blog/tags/Node/"/>
    
      <category term="JavaScript" scheme="https://github.com/sayanriju/blog/tags/JavaScript/"/>
    
      <category term="Realtime" scheme="https://github.com/sayanriju/blog/tags/Realtime/"/>
    
      <category term="Chat" scheme="https://github.com/sayanriju/blog/tags/Chat/"/>
    
      <category term="Faye" scheme="https://github.com/sayanriju/blog/tags/Faye/"/>
    
      <category term="Bayeux" scheme="https://github.com/sayanriju/blog/tags/Bayeux/"/>
    
  </entry>
  
  <entry>
    <title>Building a Simple Bot for Discord</title>
    <link href="https://github.com/sayanriju/blog/building-bot-for-discord/"/>
    <id>https://github.com/sayanriju/blog/building-bot-for-discord/</id>
    <published>2017-05-05T18:30:00.000Z</published>
    <updated>2017-05-10T15:02:52.626Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>My wife is a dedicated Clash of Clans player. From her, I recently learnt about <a href="https://discordapp.com/" target="_blank" rel="external">Discord</a>, which is a “All-in-one voice and text chat for gamers”. The gamers seem to have built thriving communities on the app, and my wife is an active member in one of them. She was having a chat with one of her fellow community members about getting a bot going which would auto-wish members on their birthdays. Sounded like a nice li’l weekend project for /me!</p>
<p>A bit of Googling revealed that there are a number of nice libraries to build a bot for Discord, and quite a few for Node.js, the weapon of my choice! I liked <a href="https://github.com/izy521/discord.io">discord.io</a>, “a small, single-file library for creating DiscordApp clients from Node.js”. Coupled with a node scheduler library (I like <a href="https://github.com/rschmukler/agenda">Agenda</a>), I figured the bot can be built quite easily.</p>
<h2 id="Before-Starting-to-Code"><a href="#Before-Starting-to-Code" class="headerlink" title="Before Starting to Code"></a>Before Starting to Code</h2><p>You’ll need to register yourself on Discord &amp; login, after which they allow you to create a new “App” inside the <a href="https://discordapp.com/developers/applications/me" target="_blank" rel="external">Developers Section</a>. Once done, you will be given the option to Create a Bot User for this app. Do that and you will have your bot. You need to note down two things here: the <strong>Client ID</strong> and the App Bot User <strong>Token</strong> (click to reveal them). Further, you may tick the Public Bot checkbox. You can also add a cool icon here, which will be the face of your bot.</p>
<p>Now that you have your app and your bot (a pretty boring one though, since it cannot do a thing yet!), it is a good idea to set up a new Discord Server where you can play around with the bot. The process is as easy as clicking on a + button after logging into Discord. Choose a cool name for your server (mine is called Botyard; ain’t that geeky?)</p>
<p>Next, you need to add your bot to your server. Google says there are a number of ways to do this, but the simplest method for me was visiting <a href="https://discordapp.com/oauth2/authorize?client_id=CLIENT_ID&amp;scope=bot&amp;permissions=0" target="_blank" rel="external">https://discordapp.com/oauth2/authorize?client_id=CLIENT_ID&amp;scope=bot&amp;permissions=0</a> in a new tab while you are logged in and choosing your Server name in the following screen. Remember to replace CLIENT_ID with the one you had jotted down previously.</p>
<p>Finally, we need to have a place where we can store our data which is used by Agenda for persisting its schedules. A local running instance of MongoDB will be fine for testing. You’ll need to note down the mongo connection string which is of the format <code>mongodb://&lt;dbuser&gt;:&lt;dbpass&gt;@&lt;dbhost&gt;:&lt;dbport&gt;</code></p>
<p>And that’s about all the bootstrapping you’d need to do before you can start infusing life into your bot, viz. the coding.</p>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>First things first: make a new directory to hold your code, create an empty <code>index.js</code> file (all our code will be written in this) and run <code>npm init</code> within it. After answering (or skipping) the stock questions, you can go on to install the required dependencies using <code>npm i -S moment agenda discord.io</code></p>
<p>Now let’s just put in the usual skeleton code to load the libraries and all in the <code>index.js</code> file (you have it opened in your favorite editor, right?):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)  <span class="comment">// Dealing with dates? Don't leave home without this lib!</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Agenda = <span class="built_in">require</span>(<span class="string">'agenda'</span>)</div><div class="line"><span class="keyword">const</span> agenda = <span class="keyword">new</span> Agenda(&#123;</div><div class="line">  <span class="attr">db</span>: &#123;<span class="attr">address</span>: process.env.MONGO_CONNECTION_STRING&#125;,</div><div class="line">  <span class="attr">processEvery</span>: <span class="string">'30 minutes'</span>	<span class="comment">// Because we are doing birthdays here, this is kept much higher than the default</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> Discord = <span class="built_in">require</span>(<span class="string">'discord.io'</span>);</div><div class="line"><span class="keyword">const</span> bot = <span class="keyword">new</span> Discord.Client(&#123;</div><div class="line">    <span class="attr">autorun</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">token</span>: process.env.BOT_TOKEN</div><div class="line">&#125;);</div><div class="line"></div><div class="line">agenda.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  agenda.start();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">graceful</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  agenda.stop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    process.exit(<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">process.on(<span class="string">'SIGTERM'</span>, graceful);</div><div class="line">process.on(<span class="string">'SIGINT'</span> , graceful);</div></pre></td></tr></table></figure>
<p>Pretty self-explanatory, right? Note that, we will be passing our secrets (MONGO_CONNECTION_STRING &amp; BOT_TOKEN) to the code using environmental variables at runtime. Also, using the <code>graceful()</code> function is the official Agenda way of ensuring that job processing is resumed post server shutdown/restarts.</p>
<p>Before writing any more code, let us take a step back and strategize a bit. That way, (and if you peruse the code comments), little to no explanation would be required when you see the actual code.</p>
<p>Here’s what we would like our code to achieve:</p>
<ul>
<li>Define an Agenda job for sending a birthday wish to a particular user as a message from the Bot</li>
<li>Setup the bot to listen to messages, and parse the ones in a pre-defined format as a “command” to get a user’s handle and her birthday</li>
<li>Use the above info to set up an Agenda schedule to wish the particular use on her birthday, and repeat it every year</li>
</ul>
<p>The first and the third points can be handled easily using the following functions (Modularization is cool, and so is separation of concerns!):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sendBirthdayMsg = <span class="function"><span class="keyword">function</span>(<span class="params">user, channelID</span>) </span>&#123;</div><div class="line">    bot.sendMessage(&#123;</div><div class="line">      <span class="attr">to</span>: channelID,</div><div class="line">      <span class="attr">message</span>: <span class="string">`@<span class="subst">$&#123;user&#125;</span> Happy Birthday to You!!!`</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">agenda.define(<span class="string">'send birthday wish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">job, done</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> data = job.attrs.data; <span class="comment">// we store whoseBirthday and channelID as properties of the job itself while scheduling it below</span></div><div class="line">  sendBirthdayMsg(data.whoseBirthday, data.channelID)</div><div class="line">  done()</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">let</span> scheduleWish = <span class="function"><span class="keyword">function</span>(<span class="params">whoseBirthday, whenBirthday, channelID</span>) </span>&#123;</div><div class="line">  agenda</div><div class="line">  .create(<span class="string">'send birthday wish'</span>, &#123;whoseBirthday, channelID&#125;) <span class="comment">// refers to the job named 'send birthday wish' defined above</span></div><div class="line">  .schedule(whenBirthday)</div><div class="line">  .repeatEvery(<span class="string">'1 year'</span>)</div><div class="line">  .save()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Code for handling the second point is a bit longer, but, again, if you read the comments, should be pretty self-explanatory!<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">bot.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">user, userID, channelID, message, event</span>) </span>&#123;</div><div class="line">  <span class="comment">// user, userID --&gt; the user who sent the message </span></div><div class="line">  <span class="comment">// (may contain a command for the bot, or may not!)</span></div><div class="line">  <span class="comment">// message --&gt; the unadulterated message content; </span></div><div class="line">  <span class="comment">// if   the message mentions another user (could be the bot), </span></div><div class="line">  <span class="comment">// it   will include a substring in the format &lt;@abcd124&gt;, </span></div><div class="line">  <span class="comment">// where   abcd1234 is the mentioned user's unique ID </span></div><div class="line">  <span class="comment">// (Note that '&lt;', '&gt;' and '@' are all parts of the substring and not some placeholders!)</span></div><div class="line">  <span class="comment">// I'd recommend adding some console.log-s here to inspect the various parameters passed to this callback</span></div><div class="line">  </div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!message.includes(<span class="string">`&lt;@<span class="subst">$&#123;bot.id&#125;</span>&gt;`</span>)) <span class="keyword">return</span> <span class="comment">// ignore messages not aimed at the bot</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> botSays = <span class="string">''</span>  <span class="comment">// this is what the bot would reply in response to a "command"</span></div><div class="line"></div><div class="line">  <span class="comment">// Clean Up: Remove the substring for the mentioned user (bot) and</span></div><div class="line">  <span class="comment">// strip all extra whitespaces</span></div><div class="line">  <span class="keyword">let</span> cleanedMsg = message.replace(<span class="string">`&lt;@<span class="subst">$&#123;bot.id&#125;</span>&gt;`</span>,<span class="string">''</span>).replace(<span class="regexp">/ +(?= )/g</span>,<span class="string">''</span>).trim()   </div><div class="line">  </div><div class="line">  <span class="comment">// Parse the message for command:</span></div><div class="line">  <span class="comment">// Format expected: &lt;username&gt; &lt;birthday as MM-DD or DD/MM&gt;</span></div><div class="line">  <span class="keyword">let</span> whoseBirthday = cleanedMsg.split(<span class="string">' '</span>)[<span class="number">0</span>]</div><div class="line">  <span class="keyword">let</span> whenBirthday = cleanedMsg.split(<span class="string">' '</span>)[<span class="number">1</span>]</div><div class="line">  <span class="keyword">let</span> whenBirthdayMoment = moment(whenBirthday, [<span class="string">'MM-DD'</span>,<span class="string">'DD/MM'</span>])  <span class="comment">// p</span></div><div class="line">  <span class="keyword">if</span> ( !whenBirthdayMoment.isValid() ) &#123;</div><div class="line">    botSays = <span class="string">`@<span class="subst">$&#123;user&#125;</span> Sorry Boss, I dint get what you just said!`</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// check if b'day was on a past day</span></div><div class="line">  <span class="keyword">if</span> ( whenBirthdayMoment.isBefore(moment(), <span class="string">'days'</span>) ) &#123;</div><div class="line">    whenBirthdayMoment.add(<span class="number">1</span>, <span class="string">'year'</span>) <span class="comment">// no belated wishes; see you next year</span></div><div class="line">  &#125;</div><div class="line">  scheduleWish(whoseBirthday, whenBirthdayMoment.toDate(), channelID)</div><div class="line">    botSays = <span class="string">`@<span class="subst">$&#123;user&#125;</span> OK Boss! I'll wish "<span class="subst">$&#123;whoseBirthday&#125;</span>" every year on <span class="subst">$&#123;whenBirthdayMoment.format(<span class="string">"Do MMMM"</span>)&#125;</span>!`</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// bot completes doing its stuff &amp; responds appropriately to the user issuing the command</span></div><div class="line">  bot.sendMessage(&#123;	</div><div class="line">    <span class="attr">to</span>: userID,</div><div class="line">    <span class="attr">message</span>: botSays</div><div class="line">  &#125;) </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>So, that’s about it! You can view the completed code at <a href="https://github.com/sayanriju/boteswar">Github</a>.</p>
<p>To run the code, just clone the repo, <code>cd</code> into the directory, run <code>npm install</code> and finally issue the command: <code>MONGO_CONNECTION_STRING=&quot;mongodb://&lt;dbuser&gt;:&lt;dbpass&gt;@&lt;dbhost&gt;:&lt;dbport&gt;/&lt;dbname&gt;&quot; BOT_TOKEN=&quot;&lt;your_token&gt;&quot; node index.js</code>. Obviously, replace the MONGO_CONNECTION_STRING and BOT_TOKEN values with your own.</p>
<p>Now you can go to your discord channel and chat around with the bot!</p>
<p>You’d notice that some extra stuff has been added in the github code. In particular, it has some random greeting texts instead of the hardcoded one discussed here. Also, not everybody is allowed to “command” the bot; a list of such privileged users who <em>can</em> (I call them bosses) have been incorporated. You just need to add <a href="https://www.reddit.com/r/discordapp/comments/40zgse/how_do_i_find_my_user_id/" target="_blank" rel="external">your own User ID</a>  to the list.</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;My wife is a dedicated Clash of Clans 
    
    </summary>
    
      <category term="JavaScript" scheme="https://github.com/sayanriju/blog/categories/JavaScript/"/>
    
      <category term="Node" scheme="https://github.com/sayanriju/blog/categories/JavaScript/Node/"/>
    
    
      <category term="Node JS" scheme="https://github.com/sayanriju/blog/tags/Node-JS/"/>
    
      <category term="Discord Bot" scheme="https://github.com/sayanriju/blog/tags/Discord-Bot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/sayanriju/blog/hello-world/"/>
    <id>https://github.com/sayanriju/blog/hello-world/</id>
    <published>2017-04-02T08:12:44.499Z</published>
    <updated>2017-04-02T08:12:44.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; 
    
    </summary>
    
    
  </entry>
  
</feed>
